#!/bin/bash
# Script de Diagn√≥stico Supabase Docker
echo "üîç DIAGN√ìSTICO SUPABASE DOCKER"
echo "=============================="

# Verificar se o Docker est√° rodando
echo "1Ô∏è‚É£ Verificando Docker..."
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando!"
    exit 1
else
    echo "‚úÖ Docker est√° funcionando"
fi

# Verificar arquivo .env
echo
echo "2Ô∏è‚É£ Verificando arquivo .env..."
if [ ! -f .env ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "   Crie o arquivo .env com as vari√°veis necess√°rias"
    exit 1
else
    echo "‚úÖ Arquivo .env encontrado"
    # Verificar vari√°veis essenciais
    missing_vars=()
    required_vars=("POSTGRES_PASSWORD" "JWT_SECRET" "ANON_KEY" "SERVICE_ROLE_KEY")
    
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" .env; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -ne 0 ]; then
        echo "‚ùå Vari√°veis em falta no .env:"
        printf '   %s\n' "${missing_vars[@]}"
    else
        echo "‚úÖ Vari√°veis essenciais presentes"
    fi
fi

# Verificar estrutura de diret√≥rios
echo
echo "3Ô∏è‚É£ Verificando estrutura de diret√≥rios..."
required_dirs=("volumes/api" "volumes/db" "volumes/storage" "volumes/logs" "volumes/functions" "volumes/pooler")
missing_dirs=()

for dir in "${required_dirs[@]}"; do
    if [ ! -d "$dir" ]; then
        missing_dirs+=("$dir")
    fi
done

if [ ${#missing_dirs[@]} -ne 0 ]; then
    echo "‚ùå Diret√≥rios em falta:"
    printf '   %s\n' "${missing_dirs[@]}"
    echo "   Execute: mkdir -p ${missing_dirs[*]}"
else
    echo "‚úÖ Estrutura de diret√≥rios OK"
fi

# Verificar status dos servi√ßos
echo
echo "4Ô∏è‚É£ Status dos servi√ßos Docker..."
if docker compose ps > /dev/null 2>&1; then
    docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Health}}"
else
    echo "‚ùå Erro ao verificar servi√ßos"
fi

# Verificar logs de servi√ßos que falharam
echo
echo "5Ô∏è‚É£ Verificando logs de servi√ßos com problemas..."
failed_services=$(docker compose ps --filter "status=exited" --format "{{.Service}}" 2>/dev/null)

if [ -n "$failed_services" ]; then
    echo "‚ùå Servi√ßos que falharam:"
    echo "$failed_services"
    echo
    echo "üìã Logs dos √∫ltimos erros:"
    while IFS= read -r service; do
        if [ -n "$service" ]; then
            echo "--- Logs do $service ---"
            docker compose logs --tail=10 "$service"
            echo
        fi
    done <<< "$failed_services"
else
    echo "‚úÖ Nenhum servi√ßo falhou"
fi

# Verificar conectividade de rede
echo
echo "6Ô∏è‚É£ Verificando conectividade..."
if docker compose exec -T db pg_isready -U postgres -h localhost > /dev/null 2>&1; then
    echo "‚úÖ Banco de dados responsivo"
else
    echo "‚ùå Banco de dados n√£o responsivo"
fi

# Verificar portas em uso
echo
echo "7Ô∏è‚É£ Verificando portas..."
ports=("5432" "54321" "54322" "54323" "54324")
for port in "${ports[@]}"; do
    if lsof -Pi :$port -sTCP:LISTEN -t > /dev/null 2>&1; then
        echo "‚úÖ Porta $port em uso"
    else
        echo "‚ö†Ô∏è  Porta $port livre"
    fi
done

echo
echo "üèÅ DIAGN√ìSTICO CONCLU√çDO"
echo "======================="
echo
echo "üí° PR√ìXIMOS PASSOS:"
echo "1. Corrija os problemas encontrados acima"
echo "2. Execute: docker compose down -v"
echo "3. Execute: docker compose up -d"
echo "4. Aguarde todos os servi√ßos ficarem healthy"
echo "5. Acesse: http://localhost:54323"